// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Test {
  id       Int     @id @default(autoincrement())
  email    String  @unique
  name     String?
  password String?
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], map: "Account_userId_fkey")
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  password      String?
  image         String?
  isDeleted     Boolean?  @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  role_id       String    
  roleType      String?   @map("role_type") @default("DEFAULT")
  role          Role?     @relation(fields: [role_id], references: [uuid])
  accounts      Account[]
  sessions      Session[]
  Token         Token[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}



enum RoleStatus {
  ACTIVE
  INACTIVE
  DELETED
  PENDING
}

model Role {
  uuid          String      @id @unique @default(uuid())
  name          String    @unique
  status        RoleStatus
  date_created  DateTime    @default(now())
  date_modified DateTime?
  tags          String?
  privileges    Privilege[]
  users         User[]
  Token         Token[]
}

model Privilege {
  uuid          String     @id @default(uuid())
  action        String
  resource      String // Renamed 'field' for clarity
  status        RoleStatus
  date_created  DateTime   @default(now())
  date_modified DateTime?

  role_uuid String
  role      Role   @relation(fields: [role_uuid], references: [uuid])

  @@index([role_uuid])
}

enum TokenStatus {
  ACTIVE
  EXPIRED
  DELETED
  PENDING
}

model Token {
  uuid         String      @id @default(uuid())
  date_created DateTime    @default(now())
  status       TokenStatus
  token        String
  role_uuid    String?     @unique
  user_id      String?     @unique

  role Role? @relation(fields: [role_uuid], references: [uuid])
  user User? @relation(fields: [user_id], references: [id])
}