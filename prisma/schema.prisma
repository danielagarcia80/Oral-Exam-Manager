// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql" // change if you're using MySQL or SQLite
  url      = env("DATABASE_URL")
}

enum Role {
  FACULTY
  STUDENT
  ADMIN
}

enum ExamType {
  ASYNCHRONOUS
  SYNCHRONOUS
  PRACTICE
}

enum TimingMode {
  OVERALL
  PER_QUESTION
}

enum Type {
  FREE_RESPONSE
}

enum CourseRole {
  INSTRUCTOR
  STUDENT
  TA
  OBSERVER
}

model User {
  user_id              String   @id @default(uuid())
  email                String   @unique
  password             String?  // email/password auth
  first_name           String
  last_name            String
  account_creation_date DateTime
  otter_id             String?  @unique
  role                 Role

  // Auth-related fields for OAuth support
  name                 String?  // e.g., from Google profile
  image                String?  // profile picture
  emailVerified        DateTime?

  // Auth-related relations
  accounts             Account[]
  sessions             Session[]

  // App-specific relations
  submissions          ExamSubmission[]
  assigned_exams       AssignedExam[]
  course_roles        CourseMembership[]
}

// The below three tables are not currentlky used, but may likely be used for Google and Github autherntication in the future
// Not used
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [user_id])

  @@unique([provider, providerAccountId])
}

// Not used
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [user_id])
}

// Not used
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
//

model Course {
  course_id   String     @id @default(uuid())
  title       String
  description String?
  start_date  DateTime
  end_date    DateTime
  banner_url  String?

  exams       Exam[]
  outcomes    CourseLearningOutcome[]
  images      QuestionImages[]
  roles       CourseMembership[]
}

model CourseMembership {
  id        String      @id @default(cuid())
  user      User        @relation(fields: [userId], references: [user_id])
  userId    String
  course    Course      @relation(fields: [courseId], references: [course_id])
  courseId  String
  role      CourseRole

  @@unique([userId, courseId])
}

model Exam {
  exam_id     String    @id @default(uuid())
  title       String
  description String
  type        ExamType
  start_date  DateTime
  end_date    DateTime
  course      Course    @relation(fields: [course_id], references: [course_id])
  course_id   String

  duration_minutes       Int
  timing_mode            TimingMode @default(OVERALL)

  requires_audio         Boolean     @default(true)
  requires_video         Boolean     @default(true)
  requires_screen_share  Boolean     @default(true)

  submissions    ExamSubmission[]
  questions      ExamIncludesQuestion[]
  assigned_to    AssignedExam[]
}


model AssignedExam {
  id          String @id @default(uuid())
  exam        Exam   @relation(fields: [exam_id], references: [exam_id])
  student     User   @relation(fields: [student_id], references: [user_id])
  exam_id     String
  student_id  String

  @@unique([exam_id, student_id])
}


model LearningOutcome {
  learning_outcome_id String @id @default(uuid())
  description         String

  questions           QuestionAddressesOutcome[]
  courses             CourseLearningOutcome[]
}

model CourseLearningOutcome {
  id                  String          @id @default(uuid())
  course              Course          @relation(fields: [course_id], references: [course_id])
  learning_outcome    LearningOutcome @relation(fields: [learning_outcome_id], references: [learning_outcome_id])
  course_id           String
  learning_outcome_id String

  @@unique([course_id, learning_outcome_id])
}

model Keyword {
  keyword_id String @id @default(uuid())
  text       String @unique

  questions  QuestionHasKeyword[]
}

model Question {
  question_id          String                     @id @default(uuid())
  text                 String
  difficulty           Int
  type                 Type
  source               String
  max_duration_minutes Int // We didn't end up using this, but removing it would require editing the dtos and I'm lazy so TODO

  keywords             QuestionHasKeyword[]
  outcomes             QuestionAddressesOutcome[]
  images               QuestionHasImage[]
  exams                ExamIncludesQuestion[]
  uploads              FileUpload[]
}

model QuestionImages {
  image_id    String   @id @default(uuid())
  image_data  String
  original_filename String

  course_id   String
  course      Course  @relation(fields: [course_id], references: [course_id])

  questions   QuestionHasImage[]
}


model QuestionHasKeyword {
  id          String   @id @default(uuid())
  question    Question @relation(fields: [question_id], references: [question_id])
  keyword     Keyword  @relation(fields: [keyword_id], references: [keyword_id])
  question_id String
  keyword_id  String

  @@unique([question_id, keyword_id])
}

model QuestionAddressesOutcome {
  id                   String          @id @default(uuid())
  question             Question        @relation(fields: [question_id], references: [question_id])
  learning_outcome     LearningOutcome @relation(fields: [learning_outcome_id], references: [learning_outcome_id])
  question_id          String
  learning_outcome_id  String

  @@unique([question_id, learning_outcome_id])
}

model QuestionHasImage {
  id          String         @id @default(uuid())
  question    Question       @relation(fields: [question_id], references: [question_id])
  image       QuestionImages @relation(fields: [image_id], references: [image_id])
  question_id String
  image_id    String

  @@unique([question_id, image_id])
}

model ExamIncludesQuestion {
  id            String   @id @default(uuid())
  exam          Exam     @relation(fields: [exam_id], references: [exam_id])
  question      Question @relation(fields: [question_id], references: [question_id])
  order_index   Int
  time_allocation Int?   // Optional, used only if PER_QUESTION
  exam_id       String
  question_id   String

  @@unique([exam_id, question_id])
}


model FileUpload {
  file_id     String   @id @default(uuid())
  question    Question @relation(fields: [question_id], references: [question_id])
  question_id String
  file_name   String
  file_type   String
  file_url    String
  uploaded_at DateTime
}

model ExamSubmission {
  submission_id     String   @id @default(uuid())
  student           User     @relation(fields: [student_id], references: [user_id])
  exam              Exam     @relation(fields: [exam_id], references: [exam_id])
  student_id        String
  exam_id           String
  submitted_at      DateTime
  attempt_number    Int
  recording_url     String
  duration_minutes  Float
  grade_percentage  Float
  feedback          String
  transcript        String?
}
